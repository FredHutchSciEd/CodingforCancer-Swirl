- Class: meta
  Course: cfc_swirl
  Lesson: 7.2_tidyverse_Challenge_Problems
  Author: Hanako Osuga
  Type: Standard
  Organization: Fred Hutch Cancer Center
  Version: 2.4.5

- Class: txt
  Output: "welcome to the tidyverse Challenge Problems!"

- Class: txt
  Output: "we are going to continue working with the clinical data frame using tidyverse"
  
- Class: cmd_question
  Output: "before you begin, you should have tidyverse installed (skip this if you do)"
  CorrectAnswer: install.packages("tidyverse")
  AnswerTests: omnitest(correctExpr = 'install.packages("tidyverse")')
  Hint: "run install.packages('tidyverse')"

- Class: cmd_question
  Output: "lets load tidyverse"
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr = "library(tidyverse)")
  Hint: "use library() to load"
  
- Class: cmd_question
  Output: "load the clinical dataset to get started"
  CorrectAnswer: clinical <- read.csv('data/clinical.csv')
  AnswerTests: omnitest(correctExpr = "clinical <- read.csv('data/clinical.csv')")
  Hint: "use read.csv to load the clinical.csv into the variable clinical"

- Class: txt
  Output: "now that you have your data set and tidyverse loaded, lets get started"
  
- Class: cmd_question
  Output: "create a new object called demographics_BLCA that only includes the height, bmi, gender, ethnicity, and race columns of clinical"
  CorrectAnswer: demographics_BLCA <- select(clinical, height, bmi, gender, ethnicity, race)
  AnswerTests: omnitest(correctExpr = "demographics_BLCA <- select(clinical, height, bmi, gender, ethnicity, race)")
  Hint: "use select()"
  
- Class: txt
  Output: "there are 6 ways to select the columns of barcode, project_id, tissue_or_organ_of_origin, primary_diagnosis, and sample_type, lets explore each one!"

- Class: cmd_question
  Output: "select the columns using their names, assign this to try_1"
  CorrectAnswer: try_1 <- select(clinical, barcode, project_id, tissue_or_organ_of_origin, primary_diagnosis, sample_type)
  AnswerTests: omnitest(correctExpr = "try_1 <- select(clinical, barcode, project_id, tissue_or_organ_of_origin, primary_diagnosis, sample_type)")

- Class: cmd_question
  Output: "select the columns by listing their index numbers (1,2,3,4,5), assign this to try_2"
  CorrectAnswer: try_2 <- select(clinical, c(1, 2, 3, 4, 5))
  AnswerTests: omnitest(correctExpr = "try_2 <- select(clinical, c(1, 2, 3, 4, 5))")
  
- Class: cmd_question
  Output: "select the columns using their index numbers but dont list them all out, assign this to try_3"
  CorrectAnswer: try_3 <- select(clinical, 1:5)
  AnswerTests: omnitest(correctExpr = "try_3 <- select(clinical, 1:5)")
  Hint: "use through"


- Class: cmd_question
  Output: "select the columns using the [] and :, assign this to try_4"
  CorrectAnswer: try_4 <- clinical[ , 1:5]
  AnswerTests: omnitest(correctExpr = "try_4 <- clinical[ , 1:5]")

- Class: cmd_question
  Output: "select the columns using [] but NOT :, assign thsi to try_5"
  CorrectAnswer: try_5 <- clinical[ , c(1, 2, 3, 4, 5)]
  AnswerTests: omnitest(correctExpr = "try_5 <- clinical[ , c(1, 2, 3, 4, 5)]")

- Class: cmd_question
  Output: "lastly, select the columns using their names to make a vector, assign this to try_6"
  CorrectAnswer: try_6 <- clinical[c("barcode", "project_id", "tissue_or_organ_of_origin", "primary_diagnosis", "sample_type")]
  AnswerTests: omnitest(correctExpr = 'try_6 <- clinical[c("barcode", "project_id", "tissue_or_organ_of_origin", "primary_diagnosis", "sample_type")]')
  Hint: "use [], c(), and the column names"

- Class: txt
  Output: "each of these 6 commands above get you the same result but they ask R in different ways"
  
- Class: cmd_question
  Output: "now lets create a new object from clinical called demographics_BLCA_current_smokers, that includes the height, bmi, gender, ethnicity, and race columns for only current smokers"
  CorrectAnswer: demographics_BLCA_current_smokers <- select(filter(clinical, Tobacco.smoking.history == "Current smoker"), height, bmi, gender, ethnicity, race)
  AnswerTests: omnitest(correctExpr = 'demographics_BLCA_current_smokers <- select(filter(clinical, Tobacco.smoking.history == "Current smoker"), height, bmi, gender, ethnicity, race)')
  Hint: "the relevant column is Tobacco.smoking.history"
  
- Class: cmd_question
  Output: "calculate the mean height of current smokers in the subset you created in the previous step"
  CorrectAnswer: mean(demographics_BLCA_current_smokers$height, na.rm=TRUE)
  AnswerTests: omnitest(correctExpr = "mean(demographics_BLCA_current_smokers$height, na.rm=TRUE)")
  Hint: "dont forget to remove NAs!"
  
- Class: cmd_question
  Output: "next lets create a new object from clinical called mutation.count_smokers that includes pack_years_smoked, cigarettes_per_day, count.ERCC2.signature.mutations, ERCC2_expr, mutations.in.TP53, and TP53_expr for current smokers"
  CorrectAnswer: mutation.count_smokers <- select(filter(clinical, Tobacco.smoking.history == "Current smoker"),pack_years_smoked, cigarettes_per_day, count.ERCC2.signature.mutations, ERCC2_expr, mutation.in.TP53, TP53_expr )
  AnswerTests: omnitest(correctExpr = "mutation.count_smokers <- select(filter(clinical, Tobacco.smoking.history == 'Current smoker'),pack_years_smoked, cigarettes_per_day, count.ERCC2.signature.mutations, ERCC2_expr, mutation.in.TP53, TP53_expr)")
  Hint: "look back at your previous command, change the variable and column names"
  
- Class: cmd_question
  Output: "make a new object from clinical called mutation.count_non_smokers that includes the same columns as above, but for Lifelong Non-smokers"
  CorrectAnswer: mutation.count_non_smokers <- select(filter(clinical, Tobacco.smoking.history == "Lifelong Non-smoker"),pack_years_smoked, cigarettes_per_day, count.ERCC2.signature.mutations, ERCC2_expr, mutation.in.TP53, TP53_expr)
  AnswerTests: omnitest(correctExpr = 'mutation.count_non_smokers <- select(filter(clinical, Tobacco.smoking.history == "Lifelong Non-smoker"),pack_years_smoked, cigarettes_per_day, count.ERCC2.signature.mutations, ERCC2_expr, mutation.in.TP53, TP53_expr )')
  Hint: "take a look at your previous command, what do you need to change for this one?"

- Class: cmd_question
  Output: "calculate the mean of the count of ERCC2 signature mutations in smokers"
  CorrectAnswer: mean(mutation.count_smokers$count.ERCC2.signature.mutations, na.rm= TRUE)
  AnswerTests: omnitest(correctExpr = "mean(mutation.count_smokers$count.ERCC2.signature.mutations, na.rm= TRUE)")
  Hint: "dont forget to remove NAs and remember you can use $ for data frames"
  
- Class: cmd_question
  Output: "now calculate the same mean for Lifelong Non-smokers"
  CorrectAnswer: mean(mutation.count_non_smokers$count.ERCC2.signature.mutations, na.rm = TRUE)
  AnswerTests: omnitest(correctExpr ="mean(mutation.count_non_smokers$count.ERCC2.signature.mutations, na.rm = TRUE)")
  Hint: "change the subset from the previous command"

- Class: cmd_question
  Output: "calculate the mean cigarettes smoked per day for smokers"
  CorrectAnswer: mean(mutation.count_smokers$cigarettes_per_day, na.rm = TRUE)
  AnswerTests: omnitest(correctExpr = " mean(mutation.count_smokers$cigarettes_per_day, na.rm = TRUE)")

- Class: cmd_question
  Output: "calculate the same for non-smokers"
  CorrectAnswer:  mean(mutation.count_non_smokers$cigarettes_per_day, na.rm = TRUE)
  AnswerTests: omnitest(correctExpr = "mean(mutation.count_non_smokers$cigarettes_per_day, na.rm = TRUE)")

- Class: txt
  Output: "is this output what you expected?"
  
- Class: mult_question
  Output: "why did you get NaN for mean cigarettes smoked per day for the second group?"
  AnswerChoices: Lifelong Non-smokers dont smoke; my code was wrong; the data frame is broken
  CorrectAnswer: Lifelong Non-smokers dont smoke
  AnswerTests: omnitest(correctVal = "Lifelong Non-smokers dont smoke")
  Hint: "what condition did you use to filter for the second group?"
  
- Class: txt
  Output: "when doing these calculations, its helpful to think about what you already know about subsets and the data, as well as what you can expect from it!"
  
- Class: txt
  Output: "in this case, you can expect that Lifelong Non-smokers dont smoke and your analysisproved you to be correct!"
  
- Class: txt
  Output: "great work on these challenge problems!"


