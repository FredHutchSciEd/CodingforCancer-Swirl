- Class: meta
  Course: cfc_swirl
  Lesson: 7.0_tidyverse
  Author: Hanako Osuga
  Type: Standard
  Organization: Fred Hutch Cancer Center
  Version: 2.4.5

- Class: txt
  Output: "welcome to the lesson on tidyverse!"
  
- Class: mult_question
  Output: "what is tidyverse?"
  AnswerChoices: package; software; app
  CorrectAnswer: package
  AnswerTests: omnitest(correctVal = "package")

- Class: txt
  Output: "packages are extensions to R that you can download and use"
  
- Class: txt
  Output: "we will be using one called tidyverse, it is technically a 
  collection of packages"
  
- Class: txt
  Output: "todyverse contains readr, dplyr, and ggplot2 but you dont need to
  memorize each individual package but it can be helpful when Googling"

- Class: cmd_question 
  Output: "lets install the tidyverse package"
  CorrectAnswer: install.packages("tidyverse")
  AnswerTests: omnitest(correctExpr = 'install.packages("tidyverse")')
  Hint: "the function to install a package is install.packages()"

- Class: cmd_question
  Output: "now that we have downloaded tidyverse, load the library/package"
  CorrectAnswer: library(tidyverse)
  AnswerTests: omnitest(correctExpr = "library(tidyverse)")
  Hint: "the function to load a library is library()"
  
- Class: txt
  Output: "you only need to install the package once but you will need to load it before each session"

- Class: txt
  Output: "when you install you will need quotation marks, but when you load it R already knows that tidyverse means so you don't need quotation marks"

- Class: cmd_question
  Output: "import thta data set from last time and assign it to clinical"
  CorrectAnswer: clinical <- read.csv("data/clinical.csv")
  AnswerTests: omnitest(correctExpr = 'clinical <- read.csv("data/clinical.csv")')
  Hint: "did you download the data from Github last time? if not go back to 6.1 to download it"

- Class: cmd_question
  Output: "inspect the structure of clinical"
  CorrectAnswer: str(clinical)
  AnswerTests: omnitest(correctExpr = "str(clinical)")
  Hint: "the function str() can be used to insepct the structure of an R object"

- Class: mult_question
  Output: "what is the data type stored in the mutations.in.TP53 column?"
  AnswerChoices: numerics; integer; character; logical
  CorrectAnswer: character
  AnswerTests: omnitest(correctVal = "character")
  Hint: "check the output of your last command"

- Class: mult_question
  Output: "what is the first column in the list that contains NA values?"
  AnswerChoices: year_at_birth; pack_years_smoked; height; mutations.in.TP53
  CorrectAnswer: pack_years_smoked
  AnswerTests: omnitest(correctVal = "pack_years_smoked")
  Hint: "go back to the output for the str() command"
  
- Class: txt
  Output: "there is a lot of data in this data frame"
  
- Class: txt
  Output: "you can select specific columns using the select function, the 
  format is variable <- select(df_name, column_name)"
  
- Class: cmd_question
  Output: "extract the column tissue_or_organ_of_origin from clinical and 
  assign it to sel_a_column"
  CorrectAnswer: sel_a_column <- select(clinical, tissue_or_organ_of_origin)
  AnswerTests: omnitest(correctExpr = "sel_a_column <- select(clinical, tissue_or_organ_of_origin)")
  Hint: "check the format above!"

- Class: cmd_question
  Output: "print sel_a_column to see your extracted columns"
  CorrectAnswer: sel_a_column
  AnswerTests: omnitest(correctExpr = sel_a_column)
  Hint: "type the variable name"
  
- Class: cmd_question
  Output: "you can extract multiple columns by adding their names to the
  command, add primary_diagnosis and smaple_type to your command above, assign it to sel_column"
  CorrectAnswer: sel_column <- select(clinical, tissue_or_organ_of_origin, primary_diagnosis, sample_type)
  AnswerTests: omnitest(correctExpr = " sel_column <- select(clinical, tissue_or_organ_of_origin, primary_diagnosis, sample_type)")
  Hint: "add the column names after the first column, use commas between column names"
  
- Class: cmd_question
  Output: "print the variable to see your extracted column"
  CorrectAnswer: sel_column
  AnswerTests: omnitest(correctExpr = "sel_column")
  
- Class: txt
  Output: "you can also use a range of columns (includes everything between) 
  using :, the format is variable <- select(df_name, start_col:end_col)"
  
- Class: cmd_question
  Output: "extract columns between barcode and sample_type form clinical, 
  assign it to sel_columns2"
  CorrectAnswer: sel_columns2 <- select(clinical, barcode:sample_type)
  AnswerTests: omnitest(correctExpr = "sel_columns2 <- select(clinical, barcode:sample_type)")
  
- Class: cmd_question
  Output: "print sel_columns2 to see your extracted columns"
  CorrectAnsewr: sel_columns2
  AnswerTests: omnitest(correctExpr = "sel_colums2")

- Class: txt
  Output: "you can also use something called helper functions"
  
- Class: txt
  Output: "helper functions help you tell R the parameters for the rows/columns 
  you want to extract, the format is variable name <- select(df_name, helper_function(argument))"

- Class: cmd_question
  Output: "lets start with the helper function start_with, extract the column 
  in clinical that starts with 'pack' and assign it to selected_columns_starts"
  CorrectAnswer: selected_columns_starts <- select(clinical, starts_with('pack'))
  AnswerTests: omnitest(correctExpr = "selected_columns_starts <- select(clinical, starts_with('pack'))" )
  Hint: "the format is variable <- select(df_name, helper_function(argument))"
  
- Class: cmd_question
  Output: "print your extracted columns"
  CorrectAnswer: selected_columns_starts
  AnswerTests: omnitest(correctExpr= "selected_columns_starts")
  
- Class: cmd_question
  Output: "now try ends_with() to extract the column that ends with 'RB1',
  assign it to selected_columns_ends"
  CorrectAnswer: selected_columns_ends <- select(clinical, ends_with("RB1"))
  AnswerTests: omnitest(correctExpr = "selected_columns_ends <- select(clinical, ends_with('RB1'))")
  Hint: "the format is variable <- select(df_name, helper_function(argument))"
  
- Class: cmd_question
  Output: "print your extracted columns"
  CorrectAnswer: selected_columns_ends
  AnswerTests: omnitest(correctExpr = "selected_columns_ends")
  
- Class: cmd_question   
  Output: "next try contains() to extract the column that contains 'mut',
  assign it to selected_columns_contains"
  CorrectAnswer: selected_column_contains <- select(clinical, contains('mut'))
  AnswerTests: omnitest(correctExpr = "selected_column_contains <- select(clinical, contains('mut'))")
  Hint: "the format is variable <- select(df_name, helper_function(argument))"

- Class: cmd_question
  Output: "print it!"
  CorrectAnswer: selected_column_contains
  AnswerTests: omnitest(correctExpr = "selected_column_contains")
  
- Class: txt
  Output: "you can combine conditions and/or helper functions using & or |"
  
- Class: cmd_question
  Output: "extract columns that contain 'mut' OR ends with 'type', assign it 
  to selected_columns_contains_lots "
  CorrectAnswer: selected_columns_contains_lots <- select(clinical, (contains('mut') | ends_with('type')))
  AnswerTests: omnitest(correctExpr = "selected_columns_contains_lots <- select(clinical, (contains('mut') | ends_with('type')))")
  Hint: "enclose your help function with (), but be careful to close all parentheses"

- Class: cmd_question
  Output: "lets see what we extracted!"
  CorrectAnswer: selected_columns_contains_lots
  AnswerTests: omnitest(correctExpr = "selected_columns_contains_lots")
  Hint: "print it!"

- Class: txt
  Output: "what about rows?"
  
- Class: txt 
  Output: "for rows we use the filter() function which accespt many 
  logical/relational operations as conditions"

- Class: txt
  Output: "the format is typically, variable <- filter(df_name, condition),
  where the condition can be anything like gender == 'female', or age_at_diagnosis > 1000"
  
- Class: cmd_question
  Output: "keep only cancer samples where sample_type is 'Primary Tumor' from
  clinical, assign to filtered_rows"
  CorrectAnswer: filtered_rows <- filter(clinical, sample_type== "Primary Tumor")
  AnswerTests: omnitest(correctExpr = 'filtered_rows <- filter(clinical, sample_type== "Primary Tumor")')
  Hint: "the condition for this would be that sample_type == 'Primary Tumor'"
  
- Class: cmd_question
  Output: "next keep only patients that were born after 1950 using the 
  year_of_birth column and assign it to filtered_rows2"
  CorrectAnswer: filtered_rows2 <- filter(clinical, year_of_birth > 1950)
  AnswerTests: omnitest(correctExpr = "filtered_rows2 <- filter(clinical, year_of_birth > 1950)")
  Hint: "if they are born after 1950, is year of birth greater than or less than 1950?"

- Class: cmd_question
  Output: "like columns, you can combine conditions, keep only normal samples 
  (sample_type == 'Solid Tissue Normal') AND the patient is born before 1950,
  assign it to filtered_rows3"
  CorrectAnswer: filtered_rows3 <- filter(clinical, (sample_type== 'Solid Tissue Normal') & (year_of_birth < 1950))
  AnswerTests: omnitest(correctExpr  = "filtered_rows3 <- filter(clinical, (sample_type== 'Solid Tissue Normal') & (year_of_birth < 1950))")
  Hint: "use & to combine the conditions, enclose each condition in a ()"
  
- Class: txt
  Output: 'there are a few ways to accomplish the same thing in R'

- Class: txt
  Output: "you can use intermediate objects to do things in multiple steps, or 
  you can combine them into one nested function"
  
- Class: cmd_question
  Output: "lets first only look at Stage IV patients, filter these rows using 
  the ajcc_pathologic_stage row and assign it to stage_iv"
  CorrectAnswer: stage_iv <- filter(clinical, ajcc_pathologic_stage == 'Stage IV')
  AnswerTests: omnitest(correctExpr = "stage_iv <- filter(clinical, ajcc_pathologic_stage == 'Stage IV')" )
  Hint: "ajcc_pathologic_stage should equal 'Stage IV'"

- Class: cmd_question
  Output: "now select only race, ethnicity, and ajcc_pathologic_stage columns from stage_iv, assign it to race_stage1"
  CorrectAnswer: race_stage <- select(stage_iv, race, ethnicity, ajcc_pathologic_stage)
  AnswerTests: omnitest(correctExpr = "race_stage <- select(stage_iv, race, ethnicity, ajcc_pathologic_stage)" )
  Hint: "remember you can just list out column names when using select()"
  
- Class: txt
  Output: "this is one way to get this subset, but you can also combine it into one nested function"

- Class: txt
  Output: "to nest these function together, stare with the outer function, what happens last"

- Class: txt
  Output: "in this case, you want R to select columns, and when you tell R which 
  data frame to select columns from you enter the filter function to filter out 
  the rows you want"
  
- Class: cmd_question
  Output: "nest the functions above and assign it to race_stage2"
  CorrectAnswer: race_stage2 <- select(filter(clinical, ajcc_pathologic_stage == 'Stage IV'), race, ethnicity, ajcc_pathologic_stage)
  AnswerTests: omnitest(correctExpr = "race_stage2 <- select(filter(clinical, ajcc_pathologic_stage == 'Stage IV'), race, ethnicity, ajcc_pathologic_stage)")
  Hint: "take the select command from above, replace stage_iv with your filter function"

- Class: cmd_question
  Output: "lets compare the two subsets, print race_stage"
  CorrectAnswer: race_stage
  AnswerTests: omnitest(correctExpr = "race_stage")

- Class: cmd_question
  Output: "print race_stage2"
  CorrectAnswer: race_stage2
  AnswerTests: omnitest(correctExpr = "race_stage2")
  
- Class: mult_question
  Output: "compare race_stage and race_stage2, do they look the same or different?"
  AnswerChoices: same; different
  CorrectAnswer: same
  AnswerTests: omnitest(correctVal = "same")

- Class: txt
  Output: "both ways get you the same output! there are many ways to get the same thing R"
  
- Class: txt
  Output: "nested functions require less actual code but can be harder to format/test"
  
- Class: txt
  Output: "there's not right or wrong way to do it, go with your preference"
  
- Class: txt
  Output: "great work with the tidyverse lesson!"
  
  
  
