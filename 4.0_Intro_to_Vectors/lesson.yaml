- Class: meta
  Course: Coding for Cancer
  Lesson: Intro to Vectors
  Author: Hanako Osuga
  Type: Standard
  Organization: Fred Hutch Cancer Center
  Version: 2.4.5

- Class: txt
  Output: "So far we have been storing single values inside variables, what if we wanted to store multiple values?"
  
- Class: txt
  Output: "Vectors are objects where we can store multiple values!"
  
- Class: txt
  Output: "Vectors can hold any data type (characters, numerics, integers, logicals) but all the values in a vector have to tbe the same data type."

- Class: txt
  Output: 'An example of a vector would be a list like (10,12,45) or ("red", "orange", "pink")'

- Class: mult_question
  Output: 'What is the problem with making a vector like this (1, 2, "three", 4)'
  AnswerChoices: No problems; Data types aren't the same; Too many values in the vector
  CorrectAnswer: Data types aren't the same
  AnswerTests: omnitest(correctVal= "Data types aren't the same")
  Hint: "Look at the data types in the vector"

- Class: mult_question
  Output: "Why might a vector be useful?"
  AnswerChoices: You can store many values; You can use a function to a set of values; Less typing; All the options
  CorrectAnswer: All the options
  AnswerTests: omnitest(correctVal= "All the options")
  Hint: "vectors (a list of many values) can be stored into a single variable"

- Class: cmd_question
  Output: "To make a vector you use the c() function. Assign the variable vector_1 a vector of (1,2,3)"
  CorrectAnswer: "vector_1 <- c(1,2,3)"
  AnswerTests: omnitest(correctExpr = "vector_1 <- c(1,2,3)")
  Hint: "the assignment operator is <-"
  
- Class: mult_question
  Output: "you should have seen the variable you just assigned pop up in the Environment pane"
  AnswerChoices: Yes; No; What is the window pane?
  CorrectAnswer: Yes
  AnswerTests: omnitest(correctVal= "Yes")
  Hint: "The Environment Pane is in the top right window"

- Class: txt
  Output: "Vectors are useful because we can apply funtions to modify the contents"
  
- Class: txt
  Output: "The function length() tells us the number of items in the vector"

- Class: cmd_question
  Output: "Try using length() to find the length of vector_1"
  CorrectAnswer: 3
  AnswerTests: omnitest(correctExpr= "length(vector_1)", correctVal=3)
  Hint: "Put vector_1 as the argument of the function"
  
- Class: txt
  Output: "you can add values to the end of a vector by entering vector <- c(vector, new value)"

- Class: cmd_question
  Output: "add 4 to the end of vector_1"
  CorrectAnswer: vector_1 <- c(vector_1, 4)
  AnswerTests: omnitest(correctExpr="vector_1 <- c(vector_1, 4)")
  Hint: "the argument for the new value goes after the argument for the vector"
  
- Class: txt
  Output: "you can add values to the beginning of vectors by entering vector <- c(new value, vector)"

- Class: cmd_question
  Output: "add 0 to the beginning of vector_1"
  CorrectAnswer: vector_1 <- c(0, vector_1)
  AnswerTests: omnitest(correctExpr="vector_1 <- c(0, vector_1)")
  Hint: "the argument for the value goes before the argument for the vector"
  
- Class: cmd_question
  Output: "add 5 to the BEGINNING of vector_1"
  CorrectAnswer: vector_1 <- c(5, vector_1)
  AnswerTests: omnitest(correctExpr='vector_1 <- c(5, vector_1)')
  Hint: "is the new value going at the beginning or end?"
  
- Class: cmd_question
  Output: "print vector_1 to check"
  CorrectAnswer: vector_1
  AnswerTests: omnitest(correctExpr="vector_1")
 
- Class: txt
  Output: "The function class() tells you the types of objects that are stored in the vector"

- Class: cmd_question
  Output: "Try using class() to determine the types of objects stored in vector_1"
  CorrectAnswer: "class(vector_1)"
  AnswerTests: omnitest(correctExpr="class(vector_1)", correctVal= "numeric")
  Hint: "Put vector_1 as the argument of the function"
  
- Class: txt
  Output: "The function mean() calculates the averages of a vector of numbers"

- Class: cmd_question
  Output: "Try using mean() to calculate the average of vector_1"
  CorrectAnswer: "mean(vector_1)"
  AnswerTests: omnitest(correctExpr= "mean(vector_1)", correctVal=2.5)
  Hint: "Put vector_1 as the argument of the function"
  
- Class: txt
  Output: "Each element in a vector has an associated index that can be used as a reference"

- Class: cmd_question
  Output: 'Make a new vector called organs and assign these values ("lung", "heart", "kidney", "brain")'
  CorrectAnswer: 'organs <- c("lung", "heart", "kidney", "brain")'
  AnswerTests: omnitest(correctExpr= 'organs <- c("lung", "heart", "kidney", "brain")')
  Hint: "c() is the function for making new vectors"
  
- Class: txt
  Output: "[] can be used to extract values at a specific position (index) of a vector"
  
- Class: txt
  Output: "In R indexes start at 1, meaning the first value in a vector is 1"
  
- Class: cmd_question
  Output: "Let's extract the value at index 1 of organs"
  CorrectAnswer: "organs[1]"
  AnswerTests: omnitest(correctExpr= "organs[1]", correctVal="lung")
  Hint: "Put the square brackets after the vector name"
  
- Class: txt
  Output: "You can use a negative number to exclude a value"
  
- Class: cmd_question
  Output: "Exclude the value at index 2 of the vector organs"
  CorrectAnswer: "organs[-2]"
  AnswerTests: omnitest(correctExpr="organs[-2]")
  Hint: "Put the square brackets after the vector name"

- Class: txt
  Output: "You can also use accessors to extract multiple values from a vector, this is called subsetting"
  
- Class: txt
  Output: "vector[c(index1,index2)] will let you get the values at index1 and index2"
  
- Class: cmd_question
  Output: "Extract the first AND third values of organs"
  CorrectAnswer: "organs[c(1,3)]"
  AnswerTests: omnitest(correctExpr="organs[c(1,3)]")
  Hint: "enter the vector name and index numbers you want to extract"
  
- Class: txt
  Output: "vector[index1: index2] will let you get the values from index1 through index2"

- Class: cmd_question
  Output: "Extract the first through third items in organs"
  CorrectAnswer: "organs[1:3]"
  AnswerTests: omnitest(correctExpr="organs[1:3]")
  Hint: "enter the vector name and the first and last index numbers of the selection you want to extract"

- Class: cmd_question
  Output: "Extract the second AND third items in organs"
  CorrectAnswer: "organs[c(2,3)]"
  AnswerTests: omnitest(correctExpr="organs[c(2,3)]")
  Hint: "Do you want index1 AND index2 or index1 THROUGH index2?"

- Class: txt
  Output: "in the above it technically didn't matter which one you chose (: or ,) because 2 and 3 are next to eachother"
  
- Class: txt
  Output: "but if you wanted index 2 AND index 203 but you asked for index 2 THROUGH index 203, it would get you a VERY different output"

- Class: txt
  Output: "with coding you have to be very specific with what you ask, your computer takes things very literally!"
  
- Class: txt
  Output: "and as your code gets more complicated it will become more important to be as specific as you can"
  
- Class: txt
  Output: "great work with your vectors today! the secret word today is 'Uranium Nitrogen'"

- Class: txt
  Output: "go back and look at all the secret words this week to find a hidden message!"