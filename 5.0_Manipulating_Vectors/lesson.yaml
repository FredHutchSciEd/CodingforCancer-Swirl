- Class: meta
  Course: Coding_for_Cancer_swirl
  Lesson: Manipulating Vectors
  Author: Hanako Osuga
  Type: Standard
  Organization: Fred Hutch Cancer Center
  Version: 2.4.5

- Class: mult_question
  Output: "What is a vector?"
  AnswerChoices: an object that can store multiple values; a person; a data type; a dataset
  AnswerTests: omnitest(correctVal= "an object that can store multiple values")
  CorrectAnswer: "an object that can store multiple values"
  Hint: "objects have one assigned value, vectors have...?"

- Class: txt
  Output: "last time we learned how to make a vector and use accessors to find values at specific positions in a vector"
  
- Class: txt
  Output: "today we'll learn more about how to manipulate and use vectors"

- Class: cmd_question
  Output: "to start let's make a vector called ages with these values (50, 55, 60, 65)"
  CorrectAnswer: ages <- c(50, 55, 60, 65)
  AnswerTests: omnitest(correctExpr= "ages <- c(50,55,60,65)")
  Hint: "to assign a vector use the assignment operator <- and the function c()"
  
- Class: txt
  Output: "last time we subsetted the vector by indexes (position)"
  
- Class: cmd_question
  Output: "extract the third value from the vector ages"
  CorrectAnswer: "ages[3]"
  AnswerTests: omnitest(correctExpr="ages[3]", correctVal=60)
  Hint: "use the accessor [] with the index of the value"
  
- Class: txt
  Output: "now we will extract using conditions"

- Class: cmd_question
  Output: "let's start by extracting values from ages that are greater than 60 (ages > 60)"
  CorrectAnswer: ages[ages>60]
  AnswerTests: omnitest(correctExpr="ages[ages>60]")
  Hint: "use the accessor [] and add in the condition"

- Class: txt
  Output: "now let's extract values that are numerically equivalent to the argument using the == operartor"
  
- Class: cmd_question
  Output: "extract values from ages that are 60"
  CorrectAnswer: ages[ages==60]
  AnswerTests: omnitest(correctExpr= "ages[ages==60]", correctVal=60)
  Hint: "use the accessor [] and add in the condition"
  
- Class: txt
  Output: "you can combine conditions using the & operator (AND) between conditions"
  
- Class: cmd_question
  Output: "extract values greater than 50 AND less than 60 from ages"
  CorrectAnswer: "ages[ages>50 & ages < 60]"
  AnswerTests: omnitest(correctExpr="ages[ages>50 & ages < 60]", correctVal=55)
  Hint: "type both conditions with & between them"
  
- Class: txt
  Output: "you can combine conditions using the | operator (OR) between conditions"
  
- Class: cmd_question
  Output: "extract values greater than 50 OR less than 60 from ages"
  CorrectAnswer: ages [ages > 50 | ages < 60]
  AnswerTests: omnitest(correctExpr="ages [ages > 50 | ages < 60]")
  Hint: "type both conditions with | between them"
  
- Class: txt
  Output: "you can extract the opposite of a condition using the ! operator (NOT logical operator)"

- Class: cmd_question
  Output: "extract values that are greater than 55"
  CorrectAnswer: "ages[ages>55]"
  AnswerTests: omnitest(correctExpr= "ages[ages>55]")
  Hint: "add the condition into the []"

- Class: cmd_question
  Output: "now extract values that are not greater than 55 (the opposite of the previous command)"
  CorrectAnswer: ages[!(ages>55)]
  AnswerTests: omnitest(correctExpr= "ages[!(ages>55)]")
  Hint: "place the ! operator before the condition places in parentheses"
  
- Class: tct
  Output: "so far we have only used vectors with complete data, but what if we were missing some values?"
  
- Class: txt
  Output: "often times with real datasets we have missing values, these are represented as NA"
  
- Class: cmd_question
  Output: "let's make a vector with missing variables, make the vector heights that contains (2, 4, 4, NA, 6)"
  CorrectAnswer: heights <- c(2, 4, 4, NA, 6)
  AnswerTests: omnitest(correctExpr= "heights <- c(2, 4, 4, NA, 6)")
  Hint: "use the <- operator and the c() function"
  
- Class: cmd_question 
  Output: "calculate the mean of heights"
  CorrectAnswer: mean(heights)
  AnswerTests: omnitest(correctExpr="mean(heights)", correctVal= NA)
  Hint: "the function for calculating the mean is mean()"

- Class: cmd_question
  Output: "calculate the max of heights"
  CorrectAnswer: max(heights)
  AnswerTests: omnitest(correctExpr = "max(heights)", correctVal=NA)
  Hint: "the function for calculating the max is max()"

- Class: txt
  Output: "R can't do math with NA values, you have to remove the NA values first"
  
- Class: txt
  Output: "you can remove NA values by adding the argument na.rm= TRUE to your function"

- Class: cmd_question
  Output: "try taking the mean of heights again, this time with the na.rm=TRUE argument"
  CorrectAnswer: mean(heights, na.rm=TRUE)
  AnswerTests: omnitest(correctExpr= "mean(heights, na.rm= TRUE)", correctVal = 4)
  Hint: "add , na.rm=TRUE after heights in your function"

- Class: cmd_question
  Output: "try taking the max of heights again, this time with the na.rm=TRUE argument"
  CorrectAnswer: max(heights, na.rm=TRUE)
  AnswerTests: omnitest(correctExpr="max(heights, na.rm=TRUE)", correctVal=6)
  Hint:  "add the argument , na.rm=TRUE after heights in your function"

- Class: txt
  Output: "you can also R to tell you which values are NA or not using the is.na() function"
  
- Class: txt
  Output: "the function returns a list of logicals (TRUE and FALSE), NA values will return TRUE while everything else will return FALSE"
  
- Class: cmd_question
  Output: "try this function on our vector ages"
  CorrectAnswer: is.na(ages)
  AnswerTests: omnitest(correctExpr= "is.na(ages)")
  Hint: "add the vector name as the argument"
  
- Class: cmd_question
  Output: "now try it on our vector heights"
  CorrectAnswer: is.na(heights)
  AnswerTests: omnitest(correctExpr= "is.na(heights)")
  Hint: "add the vector name as the argument"
  
- Class: mult_question
  Output: "which index is the NA value in the vector heights?"
  CorrectAnswer: 4
  AnswerChoices: 1;2;3;4;5
  AnswerTests: omnitest(correctVal="4")
  Hint: "what position is the TRUE value in your vector?"
  
- Class: txt
  Output: "we can also extract elements that are not missing values (not NAs) from our vector by using the ! operator, the is.na() function, and the accessor []"
  
- Class: cmd_question
  Output: "create this subset using heights[!(is.na(heights))]"
  CorrectAnswer: heights[!(is.na(heights))]
  AnswerTests: omnitest(correctExpr="heights[!(is.na(heights))]")
  
- Class: mult_question
  Output: "what is this portion !(is.na(heights)) asking R to do?"
  CorrectAnswer: to find values where is.na(heights) is not TRUE
  AnswerChoices: to find values where is.na(heights) is not TRUE; to find values where is.na(heights) is TRUE; to do math; to print the vector
  AnswerTests: omnitest(correctVal="to find values where is.na(heights) is not TRUE")
  Hint: "remember the ! is the opposite operator and the is.na() looks for whether a value is NA or not (TRUE = NA)"
  
- Class: cmd_question 
  Output: "to save this subset, assign it to a new object called heights_without_NA"
  CorrectAnswer: heights_without_NA <-heights[!(is.na(heights))]
  AnswerTests: omnitest(correctExpr="heights_without_NA <- heights[!(is.na(heights))]")
  Hint: "use the <- operator to assign the command above to heights_without_NA"
  
- Class: txt
  Output: "since this new object heights_without_NA, does not have any NA values you should be able to use math functions without using the argument na.rm = TRUE"
  
- Class: cmd_question
  Output: "try calculating the mean of heights_without_NA"
  CorrectAnswer: mean(heights_without_NA)
  AnswerTests: omnitest(correctExpr= "mean(heights_without_NA)", correctVal=4)
  
- Class: txt
  Output: "great job! you were able to subset your vectors based on conditions and remove all the NAs from your vector!"
  
- Class: txt
  Output: "the secret word today is 'Mitochondria is'"

