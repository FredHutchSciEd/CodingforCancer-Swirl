- Class: meta
  Course: Coding for Cancer
  Lesson: Functions in R
  Author: Hanako Osuga
  Type: Standard
  Organization: Fred Hutch Cancer Center
  Version: 2.4.5

- Class: txt
  Output: "Functions are built in complex tasks or a predefined set of code that allows your to repeat particular actions"
  
- Class: txt
  Output: "An example of a function is round(), it rounds the number entered in the ()."
  
- Class: txt
  Output: "In this case, the function is round(), and the number entered in the paranthesis is called the argument"
  
- Class: mult_question
  Output: "Thinking back to the previous lesson, what data type has decimal points?"
  AnswerChoices: Characters;Numerics;Integers;Logicals
  CorrectAnswer: Numerics
  AnswerTests: omnitest(correctVal='Numerics')
  Hint: "Integers are whole numbers, what is the other number data type?"

- Class: cmd_question
  Output: "Try rounding the numberic 3.14 using the function above by entering 3.14 as an arugment into the ()"
  AnswerTests: omnitest(correctExpr = "round(3.14)", correctVal = 3)
  CorrectAnswer: round(3.14)
  Hint: "add the numeric you want to round into the parantheses"

- Class: txt
  Output: "You can also specify the number of digits you want to round to by adding ', digits = number' after the first argument"
 
- Class: cmd_question
  Output: "Now try rounding 3.14159 to 2 digits"
  AnswerTests: omnitest(correctExpr = "round(3.14159, digits = 2)", correctVal = 3.14 )
  CorrectAnswer: round(3.14159, digits=2)
  Hint: "Add ', digits=2' after the number you want to round"

- Class: txt
  Output: "If you ever forget what a function does you can enter the function name after ? and your computer will tell you! Ex: ?round"

- Class: txt
  Output: "A help window will open up in the bottom right corner of your Posit cloud with information on the function"
  
- Class: cmd_question
  Output: "Using the round function with complete argument labels. Enter x=3.14 and digits=0 as the arugments into the function round()"
  CorrectAnswer: round(x=3.14, digits=0)
  AnswerTests: omnitest(correctExpr="round(x=3.14, digits=0)", correctVal = 3)
  Hint: "The arguments for the fuction go inside the parantheses"

- Class: mult_question
  Output: "Did you get the same answer as round(3.14)?"
  AnswerChoices: Same; Different
  CorrectAnswer: "Same"
  AnswerTests: omnitest(correctVal= "Same")
  Hint: "You can scroll up to see your previous commands"
  
- Class: cmd_question
  Output: "Let's try switching the order of the arguments. Copy your code from the last command (or hit the up button) and switch the position of the arguments"
  CorrectAnswer: round(digits=0, x=3.14)
  AnswerTests: omnitest(correctExpr= "round(digits=0, x=3.14)", correctVal = 3)
  Hint: "Switch the order of items before and after your comma"

- Class: mult_question
  Output: "What happened? Did you get the same answer?"
  AnswerChoices: Same;Different
  AnswerTests: omnitest(correctVal='Same')
  CorrectAnswer: Same
  
- Class: txt
  Output: "Switching the order doesn't change when you use argument labels (ex: x= and digits =)"
  
- Class: cmd_question
  Output: "Now let's try removing the argument labels (x= and digits =) from your last line of code"
  CorrectAnswer: 0
  AnswerTests: omnitest(correctExpr="round(0, 3.14)", correctVal= 0)
  
- Class: mult_question
  Output: "What happened? Was your answer the same with the argument labels?"
  AnswerChoices: Same;Different
  CorrectAnswer: Different
  AnswerTests: omnitest(correctVal="Different")
  
- Class: txt
  Output: "When you have argument labels the computer can understand what you are asking, but without the argument labels it will assume the default order or arguments"

- Class: txt
  Output: "So argument order doesn't matter as much when you use labels, but if you don't you have to be mindful of argument order (the order the arguments are entered)"

- Class: txt
  Output: "you can also use functions on a vector"
  
- Class: txt
  Output: "lets try it on vector_1 from yesterday"
  
- Class: cmd_question
  Output: "assign the variable vector_1 a vector of (1,2,3)"
  CorrectAnswer: vector_1 <- c(1,2,3)
  AnswerTests: omnitest(correctExpr = "vector_1 <- c(1,2,3)")
  Hint: "create vectors using vector_name <- c(value1, value2, etc)"

- Class: cmd_question
  Output: "the function length(), tells you the lenght of a vector, try it on vector_1"
  CorrectAnswer: length(vector_1)
  AnswerTests: omnitest(correctExpr = "length(vector_1)")
  Hint: "type in the vector name in the parentheses"
  
- Class: cmd_question
  Output: "add the value 7 to vector_1"
  CorrectAnswer: vector_1 <- c(vector_1, 7)
  AnswerTests: omnitest(correctExpr = "vector_1 <- c(vector_1, 7)")
  Hint: "the argument for the new value goes after the argument for the vector"
  
- Class: cmd_question
  Output: "what is the new lenght of vector_1?"
  CorrectAnswer: length(vector_1)
  AnswerTests: omnitest(correctExpr = "length(vector_1)"

- Class: txt
  Output: "there are also math functions we can use"
  
- Class: cmd_question
  Output: "the function mean(), calculates the mean of a vector, try it on vector_1"
  CorrectAnswer: mean(vector_1)
  AnswerTests: omnitest(correctExpr = "mean(vector_1)")
  Hint: "put in vector_1 as the argument"
  
- Class: cmd_question
  Output: "the function median, calculates the median of a vector, try it on vector_1"
  AnswerTests: median(vector_1)
  AnswerTests: omnitest(correctExpr = "median(vector_1)")
  Hint: "put in vector_1 as the argument"
  
- Class: txt
  Output: "awesome job! the secret word today is 'Fluorine'"
