- Class: meta
  Course: Coding for Cancer swirl
  Lesson: Lesson 3b Exercises
  Author: Hanako Osuga
  Type: Standard
  Organization: Fred Hutch Cancer Center
  Version: 2.4.5

- Class: mult_question
  Output: "TRUE or FALSE: Vectors can be subsetted by conditions"
  CorrectAnswer: TRUE
  AnswerChoices: TRUE;FALSE
  AnswerTests: omnitest(correctVal="TRUE")
  Hint: "conditions can be things like is greater than 50 (vector>50)"
  
- Class: text_question
  Output: "what is the operator for not (or opposite)?"
  CorrectAnswer: !
  AnswerTests: omnitest(correctVal="!")
  Hint: "you can use this also to show excitement when writing"

- Class: cmd_question
  Output: "make a vector called more_heights with these values (63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)"
  CorrectAnswer: more_heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)
  AnswerTests: omnitest(correctExpr="more_heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)")
  Hint: "you can copy the values from the instructions"

- Class: mult_question
  Output: "which is the function that tells us which data points are NA"
  CorrectAnswer: is.na()
  AnswerChoices: is.na(); na(); na.rm=TRUE
  AnswerTests: omnitest(correctVal='is.na()')
  Hint: "na.rm=TRUE is an argument not a function"

- Class: cmd_question
  Output: "create a subset of more_heights with values that are not NA"
  CorrectAnswer: more_heights[!(is.na(more_heights))]
  AnswerTests: omnitest(correctExpr="more_heights[!(is.na(more_heights))]")
  Hint: "combine the function from above and the not operator"
  
- Class: cmd_question
  Output: "save the subset from above to a new object called more_heights_noNA"
  CorrectAnswer: more_heights_noNA <- more_heights[!(is.na(more_heights))]
  AnswerTests: omnitest(correctExpr="more_heights_noNA <- more_heights[!(is.na(more_heights))]")

- Class: cmd_question
  Output: "calculate the median of more_heights, add the argument to remove the NAs"
  CorrectAnswer: median(more_heights, na.rm=TRUE)
  AnswerTests: omnitest(correctExpr= "median(more_heights, na.rm=TRUE)", correctVal="64")
  Hint: "what is the argument to remove NAs? look a few questions up"
  
- Class: cmd_question
  Output: "now calculate the median of more_heights_noNAs (the subset of more_heights with NAs removed)"
  CorrectAnswer: median(more_heights_noNA)
  AnswerTests: omnitest(correctExpr= "median(more_heights_noNA)", correctVal="64")
  
- Class: mult_question
  Output: "was there a difference between the two medians above?"
  CorrectAnswer: no
  AnswerChoices: yes;no
  AnswerTests: omnitest(correctVal="no")
  Hint: "are the numbers the same?"
  
- Class: txt
  Output: "they did the same thing but in a different order (calculate median while removing NAs vs removing NAs then calculating median)"
  
- Class: txt
  Output: "but one main difference is that the second method created a second vector you can reference in future commands"
  
- Class: txt
  Output: "both are correct but one gives you the option to use the new vector with no NAs later"
  
- Class: cmd_question
  Output: "identify the elements in more_heights_noNA are greater than 67"
  CorrectAnswer: more_heights_noNA[more_heights_noNA >67]
  AnswerTests: omnitest(correctExpr= "more_heights_noNA[more_heights_noNA >67]")
  
- Class: cmd_question
  Output: "find the length of the subset of the vector you found above"
  CorrectAnswer: length(more_heights_noNA[more_heights_noNA >67])
  AnswerTests: omnitest(correctExpr="length(more_heights_noNA[more_heights_noNA>67])")
  Hint: "use the subsetting command above as your argument for the function length (i.e. combine them into 1 command)"
  
- Class: txt
  Output: "you can nest your commands (ex: put a subsetting command inside the function) or you can do them in order"
  
- Class: txt
  Output: "for simple calculations doing them by hand might work but for more complicated things careful nesting might be easier"
  
- Class: cmd_question
  Output: 'now make a vector called buildings with the names of the Fred Hutch buildings ("Arnold", "Weintraub", "Thomas", "Hutchinson")'
  CorrectAnswer: buildings <- c('Arnold', 'Weintraub', 'Thomas', 'Hutchinson')
  AnswerTests: omnitest(correctExpr="buildings <- c('Arnold', 'Weintraub', 'Thomas', 'Hutchinson')")

- Class: cmd_question
  Output: "whoops we forgot about 'Yale', add it to the beginning of buildings"
  CorrectAnswer: buildings <- c("Yale", buildings)
  AnswerTests: omnitest(correctExpr='buildings <- c("Yale", buildings)')

- Class: cmd_question
  Output: "we got a new building! add 'Steam Plant' to the end of buildings"
  CorrectAnswer: buildings <- c(buildings, "Steam Plant")
  AnswerTests: omnitest(correctExpr='buildings <- c(buildings, "Steam Plant")')
  
- Class: cmd_question
  Output: "subset the vector to show only the name of the building whose name is in Fred Hutchinson Cancer Center"
  CorrectAnswer: buildings[buildings == 'Hutchinson'] 
  AnswerTests: omnitest(correctExpr="buildings[buildings == 'Hutchinson']")
  Hint: "the operator for equals is =="

- Class: cmd_question
  Output: "make a vector called vacation_days with these values (5, 7, 20, 1, 0, 0, 12, 4, 2, 2, 2, 4, 5, 6, 7, 10, 4)"
  CorrectAnswer: vacation_days <- c(5, 7, 20, 1, 0, 0, 12, 4, 2, 2, 2, 4, 5, 6, 7, 10, 4)
  AnswerTests: omnitest(correctExpr="vacation_days <- c(5, 7, 20, 1, 0, 0, 12, 4, 2, 2, 2, 4, 5, 6, 7, 10, 4)")

- Class: txt
  Output: "this vector represents the number of vacation days possessed by various employees"
  
- Class: txt
  Output: "each element in the vector represents an individual, the value itself represents the number of vacation days they have "
  
- Class: cmd_question
  Output: "how many employees are represented in the vector"
  CorrectAnswer: length(vacation_days)
  AnswerTests: omnitest(correctExpr="length(vacation_days)")
  Hint: "if each element is a person how can we find the number of elements in a vector"
  
- Class: cmd_question
  Output: "how many employees have at least 7 days worth of vacation days available?"
  CorrectAnswer: length(vacation_days[vacation_days >= 7])
  AnswerTests: omnitest(correctExpr="length(vacation_days[vacation_days >= 7])")
  Hint: "how can we find a subset of people with more than 7 days to find the length of?"

- Class: txt
  Output: "excellent work with manipulating vectors! things are starting to build on itself so let us know if you have any questions!"

  
